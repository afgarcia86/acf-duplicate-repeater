!function(o){var a=acf_duplicate_repeater.options,r={_default:function(e,t,a){var n=e.find('[type="'+a+'"]');acf.getField(e),acf.getField(t);t.find('[type="'+a+'"]').each(function(e,t){o(this).val(o(n[e]).val())})},button_group:function(e,t){var a=t.find('[type="radio"]');e.find('[type="radio"]').each(function(e,t){if(o(t).prop("checked"))return o(a[e]).trigger("click"),!1})},checkbox:function(e,t){var a=t.find('[type="checkbox"]');e.find('[type="checkbox"]').each(function(e,t){o(a[e]).prop("checked",o(t).prop("checked"))})},color_picker:function(e,t){var a=acf.getField(e),n=acf.getField(t),i=a.$inputText().val();n.$inputText().iris("option","color",i)},date_picker:function(e,t){r._default(e,t,"text"),r._default(e,t,"hidden")},date_time_picker:function(e,t){r._default(e,t,"text"),r._default(e,t,"hidden")},file:function(e,t){var a=e.find(".acf-file-uploader"),n=t.find(".acf-file-uploader");r._default(e,t,"hidden"),a.hasClass("has-value")&&(n.find("div").first().html(a.find("div").first().html()),t.find(".acf-file-uploader").addClass("has-value"))},flexible_content:function(e,t){var a=acf.getField(e),n=acf.getField(t);a.$layouts().each(function(e,t){var a=o(t);n.add({layout:a.data("layout")}),i(a,n.$layouts().last(),"> .acf-table > tbody > .acf-row > .acf-field, > .acf-fields > .acf-field")})},gallery:function(e,t){var a=e.find(".acf-gallery-attachments"),n=t.find(".acf-gallery-attachments"),i=t.find('input[type="hidden"]').attr("name")+"[]";a.children().each(function(e,t){$clone=o(t).clone(),$clone.find('[type="hidden"]').attr("name",i),n.append($clone)})},google_map:function(e,t){var a=acf.getField(e);acf.getField(t).setValue(a.getValue())},group:function(e,t){i(e,t,"> .acf-input > .acf-table > tbody > .acf-row > .acf-field, > .acf-input > .acf-fields > .acf-field")},image:function(e,t){r._default(e,t,"hidden"),t.find("img").attr("src",e.find("img").attr("src")),e.find(".acf-image-uploader").hasClass("has-value")&&t.find(".acf-image-uploader").addClass("has-value")},link:function(e,t){var a=e.find(".link-node"),n=t.find(".link-node");n.html(a.html()),n.attr("href",a.attr("href")),n.attr("target",a.attr("target")),n.trigger("change")},oembed:function(e,t){t.find('[data-name="search-input"]').val(e.find('[type="hidden"]').val()).trigger("blur")},post_object:function(e,t){r.select(e,t)},radio:function(e,t){r.button_group(e,t),r._default(e,t,"text")},range:function(e,t){r._default(e,t,"range"),r._default(e,t,"number")},relationship:function(e,t){var n=t.find(".values > .list"),a=t.find(".acf-relationship").children('input[type="hidden"]'),i=a.attr("name")+"[]";e.find(".values > .list").children().each(function(e,t){var a=o(t).clone();a.find('[type="hidden"]').attr("name",i),n.append(a)}),a.trigger("change")},repeater:function(e,t){var a=acf.getField(e),n=acf.getField(t);a.$rows().each(function(e,t){$new_row=n.add(),i(o(t),$new_row,"> .acf-field, > .acf-fields > .acf-field")})},select:function(e,t,a){a=a||" > .acf-input > select";var n=e.find(a),i=t.find(a);1*n.data("ui")&&(i.html(""),n.find("option").each(function(e,t){i.append(o(t).clone())})),$destOpts=i.find("option"),n.find("option").each(function(e,t){o($destOpts[e]).prop("selected",o(t).prop("selected"))})},taxonomy:function(e,t){r.radio(e,t),r.checkbox(e,t),r.select(e,t,"> .acf-input > .acf-taxonomy-field > select")},textarea:function(e,t){t.find("textarea").val(e.find("textarea").val())},time_picker:function(e,t){r._default(e,t,"text"),r._default(e,t,"hidden")},true_false:function(e,t){t.find('[type="checkbox"]').prop("checked",e.find('[type="checkbox"]').prop("checked")),t.find('[type="checkbox"]').trigger("change")},user:function(e,t){r.select(e,t)},wysiwyg:function(e,t){var a,n=acf.getField(e),i=acf.getField(t),d=i.$input().attr("id"),c=n.getValue();(a=tinymce.get(d))?(a.setContent(c),t.find("textarea").val(e.find("textarea").val()),a.save()):i.$input().html(c)}};function i(e,t,a){a=a||"> .acf-field, > .acf-fields > .acf-field";var f=e.find(a),l=t.find(a);f.each(function(e,t){return l[e]?o(f[e]).data("type")!==o(l[e]).data("type")?(console.trace("Error: source field type does not match destination field type"),!1):(a=o(f[e]),n=o(l[e]),i=a.attr("data-type"),(d=o.Event("acf_duplicate:"+i)).destination=n,a.trigger(d),void(d.isDefaultPrevented()||(r[i]?r[i](a,n):r._default(a,n,i),(c=o.Event("acf_duplicated:"+i)).destination=n,a.trigger(c)))):(console.trace("Error: source fields do not match destination fields"),!1);var a,n,i,d,c})}var e=function(a,e){var n=o.extend({},a);return o.each(e,function(e,t){if(void 0!==a[e]){if("events"===e)return void(a.events=o.extend(a.events,t));"function"==typeof t&&(n[e]=a[e])}a[e]=t}),a.parent=n,a};e(acf.models.FlexibleContentField.prototype,{events:{'click [data-name="duplicate-layout"]':"_duplicate"},render:function(){var e;return e=this.parent.render.apply(this,arguments),this.$layouts().each(function(e,t){o(this).find('[data-name="duplicate-layout"]').length||o(this).find(".acf-fc-layout-controls").prepend(a.duplicate_flexible_btn)}),e},_duplicate:function(e){var t,a,n;(a=o(e.target).closest(".layout")).closest(".acf-field"),this.add({layout:a.data("layout"),before:a}),(n=a.prev(".layout")).addClass("_duplicated"),i(a,n,"> .acf-table > tbody > .acf-row > .acf-field, > .acf-fields > .acf-field"),setTimeout(function(){n.removeClass("_duplicated")},125),(t=o.Event("acf_duplicated_layout")).destination=n,a.trigger(t)}}),e(acf.models.RepeaterField.prototype,{events:{'click a[data-event="duplicate-row"]':"_duplicate"},render:function(){var e;return e=this.parent.render.apply(this,arguments),this.$rows().each(function(e){o(this).find("> td.remove").append(a.duplicate_repeater_btn)}),e},_duplicate:function(e){var t,a,n;o(e.target).hasClass("acf-icon")&&(t=o(e.target).closest(".acf-row"),(a=this.add({before:t})).addClass("_duplicated"),i(t,a),setTimeout(function(){a.removeClass("_duplicated")},125),(n=o.Event("acf_duplicated_row")).destination=a,t.trigger(n))}})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
